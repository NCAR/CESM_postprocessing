#!/usr/bin/env python
"""Read the necessary xml files from the postprocessing configuration system and
call the f2py remap creation program.

Arguments:
machine (mandatory) - name of supported machine

Creates files: 
$POSTPROCESS_DIR/ocn_diag/eco_lib/remap.so

__________________________
Created on September, 2015

Author: CSEG <cseg@cgd.ucar.edu>
"""

from __future__ import print_function

import sys

# check the system python version and require 2.7.x or greater
if sys.hexversion < 0x02070000:
    print(70 * "*")
    print("ERROR: {0} requires python >= 2.7.x. ".format(sys.argv[0]))
    print("It appears that you are running python {0}".format(
            ".".join(str(x) for x in sys.version_info[0:3])))
    print(70 * "*")
    sys.exit(1)

#
# built-in modules
#
import argparse
import os
import subprocess
import traceback

#
# installed dependencies
#
try:
    import lxml.etree as etree
except:
    import xml.etree.ElementTree as etree

if sys.version_info[0] == 2:
    from ConfigParser import SafeConfigParser as config_parser
else:
    from configparser import ConfigParser as config_parser
#
# import modules installed in the virtual environment
#
from cesm_utils import cesmEnvLib
import jinja2


# -------------------------------------------------------------------------------
# commandline_options - parse any command line options
# -------------------------------------------------------------------------------

def commandline_options():
    """Process the command line arguments.

    """
    parser = argparse.ArgumentParser(
        description='Read the machine_postprocess.xml file to determine the f2py options and call the f2py command to create the ocn_diag/eco_lib/remap.so shared library.')

    parser.add_argument('--backtrace', action='store_true',
                        help='show exception backtraces as extra debugging '
                        'output')

    parser.add_argument('--debug', nargs=1, required=False, type=int, default=0,
                        help='debugging verbosity level output: 0 = none, 1 = minimum, 2 = maximum. 0 is default')

    parser.add_argument('--machine', nargs=1, required=True,
                        help='supported machine name is required.')

    options = parser.parse_args()
    
    return options


# -------------------------------------------------------------------------------
# read_machine_xml
# -------------------------------------------------------------------------------
def read_machine_xml(machineName, xmlFile):
    """ read_machine_xml - read the xmlFile for specified machine
    to retrieve the f2py flags.

    Arguments:
    machine (string) - machine name
    xmlFile (string) - XML file containing machine pe layout for postprocessing

    Return:
    """
    xmlDict = dict()
    found = False
    rc, err_msg = cesmEnvLib.checkFile(xmlFile, 'read')
    if rc:
        xml_tree = etree.ElementTree()
        xml_tree.parse(xmlFile)

        # find the matching machine name
        for xmlmachine in xml_tree.findall("machine"):
            if machineName.lower() == xmlmachine.get("name").lower():

                found = True
                # get the f2py
                f2py = xmlmachine.find("f2py")
                xmlDict["f2py"] = f2py.text
                xmlDict["fcompiler"] = f2py.get("fcompiler")
                xmlDict["f77exec"] = f2py.get("f77exec")
                xmlDict["f90exec"] = ''
                if 'f90exec' in f2py.attrib:
                    xmlDict["f90exec"] = f2py.get("f90exec")
        if not found:
            err_msg = ('create_f2py_remap ERROR: Invalid machine "{0}" requested for postprocessing'.format(machineName))
            raise OSError(err_msg)

    return xmlDict

# -------------------------------------------------------------------------------
# main
# -------------------------------------------------------------------------------
def main(options):
    """ main

    Arguments:
    none
    """

    # set some environment variables
    ppdir = os.getcwd()
    machine = options.machine[0]

    # get the machine dependent f2py XML element
    f2pyDict = dict()
    f2pyDict = read_machine_xml(machine, '{0}/Machines/machine_postprocess.xml'.format(ppdir))

    # change dir to ./ocn_diag/eco_lib 
    os.chdir('{0}/ocn_diag/eco_lib'.format(ppdir))

    # construct the f2py call list
    if len(f2pyDict["f90exec"]) > 0:
        f2pyCall = ['{0}'.format(f2pyDict['f2py']), '-c', '--fcompiler={0}'.format(f2pyDict['fcompiler']), 
                    '--f77exec={0}'.format(f2pyDict['f77exec']), '--f90exec={0}'.format(f2pyDict['f90exec']),
                    '-m', 'remap', 'remap.f']
    else:
        f2pyCall = ['{0}'.format(f2pyDict['f2py']), '-c', '--fcompiler={0}'.format(f2pyDict['fcompiler']), 
                    '--f77exec={0}'.format(f2pyDict['f77exec']),'-m', 'remap', 'remap.f']
    print('DEBUG f2pyCall = {0}'.format(f2pyCall))

    # remove the remap.so if it already exists
    try:
        os.remove('remap.so')
    except OSError:
        pass

    # call the f2py command as a subprocess
    try:
        subprocess.check_call(f2pyCall)
    except subprocess.CalledProcessError as e:
        print('ERROR: create_f2py_remap subprocess call to {1} failed with error:'.format(e.cmd))
        print('    {0} - {1}'.format(e.returncode, e.output))
        sys.exit(1)

    # change back to the ppdir
    os.chdir(ppdir)

    print('*****************************************************************************************')
    print('')
    print('SUCCESS: {0}/ocn_diag/eco_lib/remap.so successfully created.'.format(ppdir))
    print('')
    print('*****************************************************************************************')
    
    
#===================================

if __name__ == "__main__":
    options = commandline_options()
    try:
        status = main(options)
        sys.exit(status)
    except Exception as error:
        print(str(error))
        if options.backtrace:
            traceback.print_exc()
        sys.exit(1)
