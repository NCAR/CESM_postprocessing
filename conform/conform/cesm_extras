#! /usr/bin/env python

import json, os
import argparse
import glob

time = {
           'atmos': 'chunits(mean(time_bnds, \"nbnd\")-1, units=time)',
           'aerosol': 'chunits(mean(time_bnds, \"nbnd\")-1, units=time)',
           'atmosChem': 'chunits(mean(time_bnds, \"nbnd\")-1, units=time)',
           'ocean': 'chunits(rmunits(mean(time_bound, \"d2\"))-366, units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\")',
           'ocnBgchem': 'chunits(rmunits(mean(time_bound, \"d2\"))-366, units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\")',
           'seaIce': 'chunits(mean(rmunits(time_bounds), \"d2\")-1, units=time)',
           'land': 'chunits(mean(time_bounds, \"hist_interval\")-1, units=time)',
           'landIce': 'chunits(time * 365, units=\"days since 0001-01-01\", calendar=\"noleap\")',
           'rof': 'chunits(mean(time_bounds, \"hist_interval\")-1, units=time)'
#           'landIce': 'yeartomonth_time(chunits(time * 365, units=\"days since 0001-01-01\", calendar=\"noleap\"))',
       }
bounds = {
           'atmos': 'chunits(time_bnds, units=time)',
           'aerosol': 'chunits(time_bnds, units=time)',
           'atmosChem': 'chunits(time_bnds, units=time)',
           'ocean': 'chunits(rmunits(time_bound)-365, units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\")',
           'ocnBgchem': 'chunits(rmunits(time_bound)-365, units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\")',
           'seaIce': 'time_bounds',
           'land': 'chunits(time_bounds, units=time)',
           'landIce': 'bounds(xxtimebndsxx, bdim=\"hist_interval\")',
           'rof': 'chunits(time_bounds, units=time)'
       }

comps = {'atmos': 'atm',
           'aerosol': 'atm',
           'atmosChem': 'atm',
           'ocean': 'ocn',
           'ocnBgchem': 'ocn',
           'seaIce': 'ice',
           'land': 'lnd',
           'landIce': 'glc',
           'rof':'rof'
       }

cesm_realms = {
        "cam":"atmos",
        "clm2":"land",
        "mosart":"rof",
        "cism":"landIce",
        "pop":"ocean",
        "cice":"seaIce"
}


#===================================================================================================
# Command-line Interface
#===================================================================================================
def cli(argv=None):

    desc = """This tool adds information to the json files created by iconform to fill in the gaps
              between the informaiton that we can retreive from the request and what ultimately
              needs to be in the final netcdf output files.  This is internal knowledge and specific
              to CESM data."""
    parser = argparse.ArgumentParser(description=desc)

    parser.add_argument('-e', '--extra', default='extra_vars.json', type=str,
                        help='Filename of json file that contains the extra definitions to use.')

    parser.add_argument('-c', '--case', default='None', type=str,
                        help='CeSM case name')

    parser.add_argument('ifiles', metavar='INFILE', nargs='*', type=str, help='String that points to json files generated by pyconform.  Can contain wildcards.')

    return parser.parse_args(argv)

#===================================================================================================
# Main Script Function
#===================================================================================================
def main(argv=None):

    args = cli(argv)

    # Get list of inputs
    ifiles = args.ifiles

    # Get the 'extra' json filename and load it
    efile_base = args.extra

    # Get the casename
    cn = args.case

    #ifiles = glob.glob(ifiles_dir+"/*.json")

    # Go through each of the jsons created by iconform that the user wants to modify
    for fn in ifiles:
        fsplit = os.path.basename(fn).split('_')
        freq = fsplit[2]
        realm = fsplit[3]

        # Open and load
        with open(fn) as f:
            o_dict = json.load(f)
        o_dict_copy = o_dict.copy()

        for var,d1 in o_dict_copy.items():
            if 'input_glob' in d1.keys():
                realm = cesm_realms[d1['input_glob'].split(".")[0]]

        # open extra file
        e_path = os.path.dirname(efile_base)
        e_fn = os.path.basename(efile_base)
        if len(realm)>0:
            extra_file = e_path+"/"+comps[realm]+"_"+e_fn
        else:
            extra_file = e_path+"/"+e_fn
        with open(extra_file) as e:
            e_dict = json.load(e)

        # Go through the original to find things that we have to add and/or change
        cvar = fn.split("_")[-2]
        cr = fn.split("_")[-3]
        for var,d1 in o_dict_copy.items():
            if "file" in d1.keys():
                o_dict[var]["file"]["attributes"]["cesm_casename"] = cn
            if "definition" in d1.keys():
                if 'basin' in o_dict_copy[var]["dimensions"]:
                    o_dict[var]["dimensions"] = ['latitude' if x=='xxlatxx' else x for x in o_dict_copy[var]["dimensions"]]
                if 'vinth2p' in d1["definition"]:
                    if 'alevel' in d1["definition"]:
                        o_dict[var]["definition"] = o_dict[var]["definition"].replace('alevel','lev')
                elif 'yeartomonth_data' in d1["definition"]:
                    if 'input_glob' in d1.keys():
                        if 'clm2' in d1['input_glob'].split(".")[0]:
                            o_dict["time"]["definition"] = "mean(bounds(yeartomonth_time(time), bdim=\"hist_interval\"), \"hist_interval\")"
                            if "time_bnds" in o_dict.keys():
                                o_dict["time_bnds"]["definition"] = 'bounds(yeartomonth_time(time), bdim=\"hist_interval\")'
                            else:
                                o_dict["time_bnds"] = {}
                                o_dict["time_bnds"]["definition"] = 'bounds(yeartomonth_time(time), bdim=\"hist_interval\")'
                        else:
                            o_dict["time"]["definition"] = "yeartomonth_time(chunits(time * 365, units=\"days since 0001-01-01\", calendar=\"noleap\"))"
                            if "time_bnds" in o_dict.keys():
                                o_dict["time_bnds"]["definition"] = 'bounds(yeartomonth_time(time), bdim=\"hist_interval\")'
                        if 'clm2' in d1['input_glob'].split(".")[0] or 'cism' in d1['input_glob'].split(".")[0]:
                            o_dict[var]["file"]["autoparse_time_variable"] = "_time"
                            o_dict["_time"]={
                                     "attributes": {
                                         "axis": "T",
                                         "direction": "increasing",
                                         "standard_name": "time",
                                         "title": "time",
                                         "type": "double",
                                         "units": "days since 0001-01-01 00:00:00"
                                      },
                                      "definition": "mean(bounds(yeartomonth_time(time), bdim=\"hist_interval\"), \"hist_interval\")",
                                      "dimensions": [
                                          "time"
                                      ],
                                      "datatype": "double"}
                    else:
                        o_dict["time"]["definition"] = "mean(bounds(yeartomonth_time(time), bdim=\"hist_interval\"), \"hist_interval\")"
                        if "time_bnds" in o_dict.keys():
                            o_dict["time_bnds"]["definition"] = 'bounds(yeartomonth_time(time), bdim=\"hist_interval\")'
                        else:
                            o_dict["time_bnds"] = {}
                            o_dict["time_bnds"]["definition"] = 'bounds(yeartomonth_time(time), bdim=\"hist_interval\")'
                elif 'oclim' in d1["definition"] and 'oclim_time' not in d1["definition"]:
                    o_dict[var]["file"]["autoparse_time_variable"] = "_time"
                    o_dict["_time"]={
                                     "attributes": {
                                         "axis": "T",
                                         "direction": "increasing",
                                         "standard_name": "time",
                                         "title": "time",
                                         "type": "double",
                                         "units": "days since 0001-01-01 00:00:00"
                                      },
                                      "definition": "chunits(rmunits(mean(time_bound, \"d2\"))-366, units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\")",
                                      "dimensions": [
                                          "time"
                                      ],
                                      "datatype": "double"}
                elif 'monthtoyear_noleap' in d1["definition"] and 'monthtoyear_noleap_time'not in d1["definition"]:
                    o_dict[var]["file"]["autoparse_time_variable"] = "_time"
                    o_dict["_time"]={
                                     "attributes": {
                                         "axis": "T",
                                         "direction": "increasing",
                                         "standard_name": "time",
                                         "title": "time",
                                         "type": "double",
                                         "units": "days since 0001-01-01 00:00:00"
                                      },
                                      "definition": "chunits(rmunits(mean(time_bound, \"d2\"))-365, units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\")",
                                      #"definition": "monthtoyear_noleap_time(chunits(rmunits(time_bound), units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\"))",
                                      "dimensions": [
                                          "time"
                                      ],
                                      "datatype": "double"}
                elif 'landUse' in var:
                    o_dict[var]["definition"] = [0,1,2,3]
                    o_dict[var]["attributes"]["requested"] = "primary_and_secondary_land=0, pastures=1, crops=2, urban=3"
                elif 'soiluse' in var:
                    o_dict[var]["definition"] = [0,1,2]
                    o_dict[var]["attributes"]["requested"] = "SOIL1 C=0, SOIL2 C=1, SOIL3 Cs=2"
                    o_dict[var]["attributes"]["type"] = "int"
                    o_dict[var]["datatype"] = "int"
                elif 'soilpools' in var:
                    o_dict[var]["definition"] = [0,1,2]
                    o_dict[var]["attributes"]["type"] = "int"
                    o_dict[var]["datatype"] = "int"
                elif 'siline' in var:
                    o_dict[var]["definition"] = [0,1,2,3]
                    o_dict[var]["attributes"]["requested"] = "fram_strait=0, canadian_archipelego=1, barents_opening=2, bering_strait=3"
                    o_dict[var]["attributes"]["type"] = "int"
                    o_dict[var]["datatype"] = "int"
                elif 'basin' in var:
                    o_dict[var]["definition"] = [0,1,2]
                    o_dict[var]["attributes"]["requested"] = "atlantic_arctic_ocean=0, indian_pacific_ocean=1, global_ocean=2"
                    o_dict[var]["attributes"]["type"] = "int"
                    o_dict[var]["datatype"] = "int"
                    if 'latitude' in o_dict.keys():
                        o_dict['latitude']["definition"] = 'lat_aux_grid'
                    if 'latitude_bnds' in o_dict.keys():
                        o_dict['latitude_bnds']["definition"] = "bounds(lat_aux_grid, bdim=\"d2\")"
                        o_dict['latitude_bnds']["dimensions"] = ["latitude","d2"]
                    if 'olevel' in o_dict.keys():
                        o_dict['olevel']["definition"] = 'moc_z'
                    if 'olevel_bnds' in  o_dict.keys():
                        o_dict['olevel_bnds']["definition"] = "bounds(moc_z, bdim=\"d2\")"
            if 'landIce' in fn.split("_")[-3] or 'landIce' in fn.split("_")[-4] or 'atmos' in fn.split("_")[-3] or 'aerosol' in fn.split("_")[-3] or 'land' in fn.split("_")[-3]:
                if 'input_glob' in d1.keys() and "ygre" in o_dict.keys() and "xgre" in o_dict.keys():
                    if 'clm2' in d1['input_glob'].split(".")[0]:
                        o_dict.pop("ygre", None)
                        o_dict.pop("xgre", None)
                        o_dict['lat'] = e_dict['latitude']
                        o_dict['lon'] = e_dict['longitude']
                        o_dict['lat_bnds'] = e_dict['latitude_bnds']
                        o_dict['lon_bnds'] = e_dict['longitude_bnds']
                        for var,d1 in o_dict_copy.items():
                            if cvar in var:
                                o_dict[var]["dimensions"] = [dim.replace("ygre", "lat") for dim in o_dict[var]["dimensions"]]
                                o_dict[var]["dimensions"] = [dim.replace("xgre", "lon") for dim in o_dict[var]["dimensions"]]
                                o_dict[var]["attributes"]["coordinates"] = o_dict[var]["attributes"]["coordinates"].replace("ygre", "lat")
                                o_dict[var]["attributes"]["coordinates"] = o_dict[var]["attributes"]["coordinates"].replace("xgre", "lon")
                                o_dict['lat']["attributes"]["bounds"]="lat_bnds"
                                o_dict['lon']["attributes"]["bounds"]="lon_bnds"
                                o_dict['lat']["dimensions"] = ["lat"]
                                o_dict['lon']["dimensions"] = ["lon"]
                                o_dict['lat_bnds']["dimensions"] = ["lat", "hist_interval"]
                                o_dict['lon_bnds']["dimensions"] = ["lon", "hist_interval"]
                    elif 'cism' in d1['input_glob'].split(".")[0]:
                        o_dict.pop("latitude", None)
                        o_dict.pop("longitude", None)
                        o_dict['xgre'] = e_dict['xgre']
                        o_dict['ygre'] = e_dict['ygre']
                        o_dict['xgre_bnds'] = e_dict['xgre_bnds']
                        o_dict['ygre_bnds'] = e_dict['ygre_bnds']
                elif 'input_glob' in d1.keys() and "yant" in o_dict.keys() and "xant" in o_dict.keys():
                    if 'clm2' in d1['input_glob'].split(".")[0]:
                        o_dict.pop("yant", None)
                        o_dict.pop("xant", None)
                        o_dict['lat'] = e_dict['latitude']
                        o_dict['lon'] = e_dict['longitude']
                        o_dict['lat_bnds'] = e_dict['latitude_bnds']
                        o_dict['lon_bnds'] = e_dict['longitude_bnds']
                        for var,d1 in o_dict_copy.items():
                            if cvar in var:
                                o_dict[var]["dimensions"] = [dim.replace("yant", "lat") for dim in o_dict[var]["dimensions"]]
                                o_dict[var]["dimensions"] = [dim.replace("xant", "lon") for dim in o_dict[var]["dimensions"]]
                                o_dict[var]["attributes"]["coordinates"] = o_dict[var]["attributes"]["coordinates"].replace("yant", "lat")
                                o_dict[var]["attributes"]["coordinates"] = o_dict[var]["attributes"]["coordinates"].replace("xant", "lon")
                                o_dict['lat']["attributes"]["bounds"]="lat_bnds"
                                o_dict['lon']["attributes"]["bounds"]="lon_bnds"
                                o_dict['lat']["dimensions"] = ["lat"]
                                o_dict['lon']["dimensions"] = ["lon"]
                                o_dict['lat_bnds']["dimensions"] = ["lat", "hist_interval"]
                                o_dict['lon_bnds']["dimensions"] = ["lon", "hist_interval"]
                    elif 'cism' in d1['input_glob'].split(".")[0]:
                        o_dict.pop("latitude", None)
                        o_dict.pop("longitude", None)
                        o_dict['xant'] = e_dict['xant']
                        o_dict['yant'] = e_dict['yant']
                        o_dict['xant_bnds'] = e_dict['xant_bnds']
                        o_dict['yant_bnds'] = e_dict['yant_bnds']
                elif 'input_glob' in d1.keys() and "latitude" in o_dict.keys() and "longitude" in o_dict.keys():
                    if 'cism' in d1['input_glob'].split(".")[0]:
                        o_dict.pop("latitude", None)
                        o_dict.pop("longitude", None)
                        o_dict.pop("latitude_bnds", None)
                        o_dict.pop("longitude_bnds", None)
                        o_dict['xgre'] = e_dict['xgre']
                        o_dict['ygre'] = e_dict['ygre']
                        o_dict['xgre_bnds'] = e_dict['xgre_bnds']
                        o_dict['ygre_bnds'] = e_dict['ygre_bnds']
                        for var,d1 in o_dict_copy.items():
                            if cvar in var:
                                o_dict[var]["dimensions"] = [dim.replace("latitude", "ygre") for dim in o_dict[var]["dimensions"]]
                                o_dict[var]["dimensions"] = [dim.replace("longitude", "xgre") for dim in o_dict[var]["dimensions"]]

            if 'iceband' in var:
                o_dict['iceband_bnds'] = e_dict['iceband_bnds']
                o_dict['iceband']["dimensions"] = ["iceband"]
                o_dict["nc"] = e_dict["nc"]

            if cvar in var and ('ocean' in cr or 'ocn' in cr):
                if "nlat" in e_dict.keys():
                    o_dict["nlat"] = e_dict["nlat"]
                if "nlon" in e_dict.keys():
                    o_dict["nlon"] = e_dict["nlon"]
            if cvar in var and ('seaIce' in cr or 'ocean' in cr or 'ocn' in cr):
                if "nj" in e_dict.keys():
                    o_dict["nj"] = e_dict["nj"]
                if "ni" in e_dict.keys():
                    o_dict["ni"] = e_dict["ni"]
            if 'bounds' in d1["attributes"].keys():
                 if d1["attributes"]["bounds"] not in o_dict.keys():
                     if d1["attributes"]["bounds"] in e_dict.keys():
                         o_dict[d1["attributes"]["bounds"]] = e_dict[d1["attributes"]["bounds"]]
                 elif 'yeartomonth_time' in  o_dict[d1["attributes"]["bounds"]]["definition"]:
                     d =  o_dict[d1["attributes"]["bounds"]]["definition"]
                     o_dict[d1["attributes"]["bounds"]] = e_dict[d1["attributes"]["bounds"]]
                     o_dict[d1["attributes"]["bounds"]]["definition"] = d
                 if var == 'time' and len(realm)>0:
                     if 'input_glob' in d1.keys():
                         if 'clm2' in d1['input_glob'].split(".")[0]:
                             o_dict[d1["attributes"]["bounds"]]["definition"] = bounds['land']
                         elif 'cism' in d1['input_glob'].split(".")[0]:
                             o_dict[d1["attributes"]["bounds"]]["definition"] = bounds['landIce']
                         else:
                             o_dict[d1["attributes"]["bounds"]]["definition"] = bounds[realm]
                     else:
                         if 'yeartomonth_time' not in o_dict[d1["attributes"]["bounds"]]["definition"]:
                             o_dict[d1["attributes"]["bounds"]]["definition"] = bounds[realm]
            if "alevhalf" in d1["dimensions"] and "alevhalf" != var:
                o_dict[var]["file"]["metavars"] = ["ps", "p0", "a", "b"]
                if "p0" not in o_dict.keys():
                    o_dict["p0"] = e_dict["p0"]
                if "ps" not in o_dict.keys():
                    o_dict["ps"] = e_dict["ps"]
                if "a" not in o_dict.keys():
                    o_dict["a"] = e_dict["a"]
                if "a_bnds" not in o_dict.keys():
                    o_dict["a_bnds"] = e_dict["a_bnds"]
                if "b" not in o_dict.keys():
                    o_dict["b"] = e_dict["b"]
                if "b_bnds" not in o_dict.keys():
                    o_dict["b_bnds"] = e_dict["b_bnds"]
            if "alevel" in d1["dimensions"] and "alevel" != var:
                o_dict[var]["file"]["metavars"] = ["ps", "p0", "a", "b"]
                if "p0" not in o_dict.keys():
                    o_dict["p0"] = e_dict["p0"]
                if "a" not in o_dict.keys():
                    o_dict["a"] = e_dict["a"]
                if "a_bnds" not in o_dict.keys():
                    o_dict["a_bnds"] = e_dict["a_bnds"]
                if "b" not in o_dict.keys():
                    o_dict["b"] = e_dict["b"]
                if "b_bnds" not in o_dict.keys():
                    o_dict["b_bnds"] = e_dict["b_bnds"]
                if "ps" not in o_dict.keys():
                    o_dict["ps"] = e_dict["ps"]
            if "alevel" in d1["dimensions"] and "alevel" != var:
                o_dict[var]["file"]["metavars"] = ["ps", "p0"]
                if "p0" not in o_dict.keys():
                    o_dict["p0"] = e_dict["p0"]
            if var == 'time' or var == 'time1' or var == 'time2' or var == 'time3':
                if 'mon' in freq:
                    if 'input_glob' in d1.keys():
                        if 'clm2' in d1['input_glob'].split(".")[0]:
                            if 'yeartomonth_time' not in o_dict[var]["definition"]:
                                o_dict[var]["definition"] = time['land']
                        elif 'cism' in d1['input_glob'].split(".")[0]:
                            o_dict[var]["definition"] = time['landIce']
                    else:
                        if "definition" in o_dict[var].keys():
                            if 'yeartomonth_time' not in o_dict[var]["definition"] and "oclim_time" not in o_dict[var]["definition"] and "monthtoyear_noleap_time" not in o_dict[var]["definition"]:
                                o_dict[var]["definition"] = time[realm]
                else:
                    if "definition" not in o_dict[var].keys():
                        o_dict[var]["definition"] = "time"
                    else:
                        if "oclim_time" not in o_dict[var]["definition"] and "monthtoyear_noleap_time" not in o_dict[var]["definition"]:
                            o_dict[var]["definition"] = "time"
            if var == 'alevel' or var == 'alevhalf':
                o_dict[var]["attributes"]["units"] = "hPa"
            if var == 'olevel' or var == 'oline':
                o_dict[var]["attributes"]["units"] = "centimeters"
            if "time_bnds" in o_dict and realm != 'seaIce':
                if "attributes" not in o_dict["time_bnds"].keys():
                    o_dict["time_bnds"]["attributes"] = {}
                o_dict["time_bnds"]["attributes"]["units"] = "days since 0001-01-01 00:00:00"
                o_dict["time_bnds"]["attributes"]["calendar"] = "noleap"
                if (realm == 'ocean' or realm == 'ocnBgchem') and "definition" in o_dict["time_bnds"].keys():
                    if '365' not in o_dict["time_bnds"]["definition"]:
                        o_dict["time_bnds"]["definition"] = "chunits(rmunits(time_bound)-365, units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\")"
            if "time" in o_dict:
                if (realm == 'ocean' or realm == 'ocnBgchem') and "definition" in o_dict["time"].keys():
                    if '366' not in o_dict["time"]["definition"]:
                         o_dict["time"]["definition"] =  "chunits(rmunits(time)-365, units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\")"


        # Go through the json file again and correct coord names
        to_change = {}
        # find anything with altLabel
        for v in o_dict.keys():
            if "attributes" in o_dict[v].keys():
                if 'altLabel' in o_dict[v]["attributes"]:
                    to_change[v] = o_dict[v]["attributes"]["altLabel"]
                    o_dict[v]["attributes"].pop("altLabel")
        # find a matching bound, if present
        olist = list(to_change.keys())
        for o in olist:
            if o+"_bnds" in o_dict.keys():
                to_change[o+"_bnds"] = to_change[o]+'_bnds'
        # change the names that we've found
        for o in to_change.keys():
            n = to_change[o]
            o_dict[n] = o_dict.pop(o)
        # sweep through and change all bounds and coords
        for v in o_dict.keys():
            if "bounds" in o_dict[v]["attributes"].keys():
                if o_dict[v]["attributes"]["bounds"] in to_change.keys():
                    o_dict[v]["attributes"]["bounds"] = to_change[o_dict[v]["attributes"]["bounds"]]
            for n,d in enumerate(o_dict[v]["dimensions"]):
                if d in to_change.keys():
                    o_dict[v]["dimensions"][n] = to_change[d]
            if "coordinates" in o_dict[v]["attributes"].keys():
                for o in to_change.keys():
                    if o in o_dict[v]["attributes"]["coordinates"]:
                        n = to_change[o]
                        o_dict[v]["attributes"]["coordinates"] = o_dict[v]["attributes"]["coordinates"].replace(o,n)
        for v in o_dict.keys():
           if "definition" in o_dict[v].keys():
               if 'oclim' in o_dict[v]["definition"]:
                   o_dict["time"]["definition"]="oclim_time(chunits(oclim_timebnds(chunits(time, units=\"days since 0001-01-01\", calendar=\"noleap\"), bdim=\"d2\"), units=\"days since 0001-01-01\", calendar=\"noleap\"))"
                   o_dict["time_bnds"]["definition"]="oclim_timebnds(chunits(time, units=\"days since 0001-01-01\", calendar=\"noleap\"), bdim=\"d2\")"
               elif 'monthtoyear_noleap' in o_dict[v]["definition"]:
                   o_dict["time"]["definition"]="monthtoyear_noleap_time(chunits(rmunits(time_bound), units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\"))"
                   o_dict["time_bnds"]["definition"]="monthtoyear_noleap_timebnds(chunits(rmunits(time_bound), units=\"days since 0001-01-01 00:00:00\", calendar=\"noleap\"))"
        # Rewrite the file
        with open(fn, 'w') as outfile:
            json.dump(o_dict, outfile, sort_keys=True, indent=4)

    print("FINISHED 2nd WRITE OF JSON FILES")

#===================================================================================================
# Command-line Operation
#===================================================================================================
if __name__ == '__main__':
    main()
